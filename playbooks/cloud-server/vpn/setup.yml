---

# We use a single dockerized OpenVPN server for our VPN.
# https://github.com/kylemanna/docker-openvpn/tree/master

- name: VPN Setup
  hosts: cloud-server
  vars:
    vpn_image: kylemanna/openvpn
    ovpn_data_volume_name: ovpn-data-spear
    ovpn_data_volume_path: /var/lib/docker/volumes/ovpn-data-spear/_data/
    common_name: "SPEAR-EDGE-TESTBED-VPN-Server"
    update_vpn_config: false

  tasks:
    - name: Check if OpenVPN config exists
      ansible.builtin.stat:
        path: "{{ ovpn_data_volume_path }}/openvpn.conf"
      register: ovpn_config

    - name: Generate the OpenVPN config
      when: not ovpn_config.stat.exists or update_vpn_config
      block:
        - name: Generate OpenVPN config
          community.docker.docker_container:
            name: ovpn_genconfig
            image: "{{ vpn_image }}"
            # EXPLANATION:
            # -s : This is the dynamic (~DHCP) IP range for clients.
            #      The first IP will be used by the server.
            #      The rest will be used by people connecting to our VPN.
            # We use dynamic and static IPs.
            # These are split into two disjunct subnets to avoid collisions.
            # -r : Adds a route to the vpn server and tells it to also handle the static hosts.
            #      Otherwise we could not reach the static (cluster) hosts.
            # -p : Pushes this (static) route to all connecting clients.
            #      Without it users could not reach the static vpn members (cluster devices).
            # -c : Ensures that vpn clients can connect to each other.
            # -d : Deactivates vpn default routes. I.e. Avoid piping the entire traffic via the VPN.
            #      With this flag only vpn relevant traffic goes through the vpn tunnel.
            #      This is also called split tunneling.
            # -N : Configures NAT to access external server network.
            # -u : Public server URL
            command: |
              ovpn_genconfig \
                -s {{ vpn_dynamic_base_ip }}/24 \
                -r {{ vpn_static_base_ip }}/24 \
                -p "route {{ vpn_static_base_ip }} 255.255.255.0" \
                -c \
                -d \
                -N \
                -u udp://{{ cloud_server_ip }}:{{ vpn_port }}
            volumes:
              - "{{ ovpn_data_volume_name }}:/etc/openvpn"
            auto_remove: true

        # NOTE: Fixes issues between different OpenVPN versions.
        - name: Remove compression lines from OpenVPN config
          ansible.builtin.lineinfile:
            path: "{{ ovpn_data_volume_path }}/openvpn.conf"
            regexp: '^(comp-lzo no|push "comp-lzo no")$'
            state: absent
          become: true

    - name: Check if OpenVPN PKI CA exists
      ansible.builtin.stat:
        path: "{{ ovpn_data_volume_path }}/pki"
      register: ovpn_pki

    - name: Generate the PKI
      when: not ovpn_pki.stat.exists
      block:
        - name: Start OpenVPN container for PKI initiation
          community.docker.docker_container:
            name: ovpn_initpki
            image: "{{ vpn_image }}"
            command: sleep infinity
            volumes:
              - "{{ ovpn_data_volume_name }}:/etc/openvpn"
            env:
              EASYRSA_REQ_CN: "{{ common_name }}"
            auto_remove: false
            state: started

        - name: Run ovpn_initpki with expect for passphrase prompts
          ansible.builtin.expect:
            command: docker exec -i ovpn_initpki ovpn_initpki
            responses:
              "Enter New CA Key Passphrase:": "{{ vpn_ca_pwd }}"
              "Re-Enter New CA Key Passphrase:": "{{ vpn_ca_pwd }}"
              'Common Name \(eg: your user, host, or server name\) \[Easy-RSA CA\]': "{{ common_name }}"
              "Enter pass phrase for /etc/openvpn/pki/private/ca.key": "{{ vpn_ca_pwd }}"
            timeout: 300
          no_log: false

        - name: Remove the OpenVPN PKI init container
          community.docker.docker_container:
            name: ovpn_initpki
            state: absent
            force_kill: true

    - name: Run OpenVPN Server
      community.docker.docker_container:
        name: openvpn
        image: kylemanna/openvpn
        detach: true
        published_ports:
          - "1194:1194/udp"
        volumes:
          - "{{ ovpn_data_volume_name }}:/etc/openvpn"
        capabilities:
          - NET_ADMIN
        recreate: "{{ update_vpn_config }}"
